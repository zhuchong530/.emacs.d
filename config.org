:PROPERTIES:
:ID:       d8f6fe9a-74a1-4413-9c1f-029dba18071c
:END:
#+title: Literate Emacs config
#+OPTIONS: ^:{}

* 什么是文学编程

文学编程(Literate programming), 由Donald Knuth于1984年提出：

#+begin_quote
Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do.
#+end_quote

** 如何使用文学编程编写Emacs配置文件

在 =init.el= 文件中,使用 ~org-babel-load-file~ 引入org文件, 例如：

#+begin_quote
(org-babel-load-file "~/.emacs.d/config.org")
#+end_quote

上面这条语句实际是通过 ~org-babel-tangle~ 将文件中的配置代码导出到文件 =~/.emacs.d/config.el= 。然后使用 ~load-file~ 加载结果文件，效果如同：

#+begin_quote
(load-file "~/.emacs.d/config.el")
#+end_quote

但是，它会检查 =config.org= 和 =config.el= 文件的时间戳， 如果 =config.org= 文件有变化，会自动重新生成 =config.el= 文件

* general settings

** 注释

为了符合Emacs规范，文件最前面必须是以下内容

#+begin_src emacs-lisp
  ;;; config.el --- Cathy.Chang's Emacs configuration -*- lexical-binding: t -*-

  ;; Copyright (C) 2008-2024 Cathy Chang

  ;; Author: Cathy.Chang <xxxxxxx@gmail.com>
  ;; Keywords: internal

  ;;; Commentary:
  ;; A Emacs config file generated from config.org automaticaly

  ;;; Code:

#+end_src

** 版本检查

检查Emacs版本，要求Emacs >= 28

#+begin_src emacs-lisp
  (when (version< emacs-version "28")
    (error "Requires at least GNU Emacs 28, but you're running %s" emacs-version))
#+end_src

** 编码

#+begin_src emacs-lisp
  (set-charset-priority 'unicode)
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8-unix 't)
  (setenv "LANG" "en_US.UTF-8")
  (setenv "LC_ALL" "en_US.UTF-8")
  (setenv "LC_CTYPE" "en_US.UTF-8")
#+end_src

** 配置包管理的源

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
                           ;; ("org" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/org/")
                           ("gnu" . "https://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")))
  (package-initialize)
  (when (not package-archive-contents)
    (package-refresh-contents))

#+end_src

** use-package

在29.1里，use-package变成built-in。

[[https://github.com/jwiegley/use-package][官方]]
[[https://jwiegley.github.io/use-package/][官方文档]]

这个包实际是宏(macro)，可以隔离包配置。 具体参见这里： [[id:66760557-2681-41d4-8e02-ea68fe02e805][use-package]]

#+begin_src emacs-lisp
  ;; (unless (package-installed-p 'use-package)
  ;;   (package-refresh-contents)
  ;;   (package-install 'use-package)
  ;;   (package-install 'diminish)
  ;;   (package-install 'bind-key))

  ;; (eval-when-compile
  ;;   (require 'use-package))
  ;; (require 'diminish)
  ;; (require 'bind-key)
  (setq use-package-verbose t)
  (setq use-package-always-ensure t)
  (setq use-package-always-demand t)
  (setq use-package-compute-statistics t)

#+end_src

** Garbage Collector Magic Hack

[[https://github.com/emacsmirror/gcmh][官网]]

强化GC回收

#+begin_src emacs-lisp
  (use-package gcmh
    :config
    (setq gcmh-idle-delay 5)
    (setq gcmh-high-cons-threshold (* 128 1024 1024)) ;128MB
    (gcmh-mode 1))
#+end_src

** exec-path-from-shell

[[https://github.com/purcell/exec-path-from-shell][官网]]

这个包确保Emacs中的环境变量和用户shell中的一致

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config (exec-path-from-shell-initialize))
#+end_src

** Emacs内建功能

具体信息可以查询[[https://www.gnu.org/software/emacs/manual/html_mono/emacs.html][官网文档]]

*** 各种bar

工具栏，滚动栏，菜单栏 全部不要！

#+begin_src emacs-lisp
  (when (window-system)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (menu-bar-mode -1)
    (setq use-file-dialog nil)
    (setq use-dialog-box nil))
#+end_src

*** 关掉启动信息啥的

#+begin_src emacs-lisp
  ;; No need to see GNU agitprop
  (setq inhibit-startup-screen t)
  ;; No need to remind me what a scratch buffer is
  (setq inhibit-startup-message nil)
  (setq inhibit-startup-echo-area-message t)
#+end_src

*** 关掉ring-bell

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

*** symlink处理

#+begin_src emacs-lisp
  (setq find-file-visit-truename t)
  (setq vc-follow-symlinks t)
#+end_src

*** 缩进用空格而不是tab

#+begin_src emacs-lisp
  ;; Never mix tabs and spaces. Never use tabs, period.
  ;; We need the setq-default here because this becomes
  ;; a buffer-local variable when set.
  (setq-default indent-tabs-mode nil)
#+end_src

*** 超长文件处理

#+begin_src emacs-lisp
  (global-so-long-mode)                   ;Handle long files
#+end_src

*** 高亮当前行

这里设置为全局

#+begin_src emacs-lisp
  (global-hl-line-mode t)
#+end_src

*** 自动折行

#+begin_src emacs-lisp
  (global-visual-line-mode t)
#+end_src

*** Delete region when yank on top of it

#+begin_src emacs-lisp
  (delete-selection-mode t)
#+end_src

*** 不生成备份文件

#+begin_src emacs-lisp
  (setq make-backup-files nil)
#+end_src

*** 关闭自动保存

#+begin_src emacs-lisp
  (setq auto-save-default nil)
#+end_src

*** 其他选项配置

先这样吧，回头慢慢搞

#+begin_src emacs-lisp
  (setq
   ;; Double-spaces after periods is morally wrong
   sentence-end-double-space nil
   ;; Save existing clipboard text into the kill ring before replacing it.
   save-interprogram-paste-before-kill t
   ;; Fix undo in commands affecting the mark
   mark-even-if-inactive nil
   ;; if NIL, kill whole line and move the next line up
   kill-whole-line t
   ;; accept 'y' or 'n' instead of yes/no
   use-short-answers t
   default-directory "~/Programme/"
   ;; prefer newer elisp files
   load-prefer-newer t
   ;; disable lock files, losing benefits of simultaneous editing
   create-lockfiles nil
   global-mark-ring-max 5000         ; increase mark ring to contains 5000 entries
   mark-ring-max 5000                ; increase kill ring to contains 5000 entries
   confirm-kill-emacs 'y-or-n-p
   ;; specifies the maximum length of a minibuffer history list
   history-length                     1000
   ;; Disable non selected window highlight
   cursor-in-non-selected-windows     nil
   highlight-nonselected-windows      nil
   ;; PATH
   exec-path                          (append exec-path '("/usr/local/bin/"))
   ;; Backups disabled
   backup-inhibited                   t
   fringes-outside-margins            t
   select-enable-clipboard          t
   frame-resize-pixelwise t
   ;; delete to trash
   delete-by-moving-to-trash t
   ;; highlight syntax
   global-font-lock-mode t
   )
  (defalias 'yes-or-no-p 'y-or-n-p)
  ;; default to 4 visible spaces to display a tab
  (setq-default tab-width 4)
  (set-fringe-mode 10)

  ;; 平滑滚动
  (if (boundp 'pixel-scroll-precision-mode)
      (pixel-scroll-precision-mode t))

#+end_src

*** 保存Emacs会话

#+begin_src emacs-lisp
  ;; ;; Save backup files in a dedicated directory
  (use-package desktop
    :config (desktop-save-mode)
    :custom
    (desktop-restore-eager 1)
    (desktop-lazy-idle-delay 1)
    (desktop-lazy-verbose nil)
    )
#+end_src

*** 保存编辑位置

打开文件，回到上次编辑位置

#+begin_src emacs-lisp
  ;; history
  (use-package saveplace
    :config (save-place-mode))
#+end_src

*** 保存minibuff历史

#+begin_src emacs-lisp
  (use-package savehist
    :config (savehist-mode))
#+end_src

*** 外部程序修改文件后，自动加载文件

#+begin_src emacs-lisp
  ;; Automatically reload files was modified by external program
  (use-package autorevert
    :diminish
    :hook (after-init . global-auto-revert-mode)
    )
#+end_src

*** 括号效果

#+begin_src emacs-lisp
  (setq-default show-paren-style 'expression
                show-paren-delay 0
                show-paren-highlight-openparen t
                show-paren-when-point-inside-paren nil
                show-paren-when-point-in-periphery t)
  (show-paren-mode t)
#+end_src

*** line number

#+begin_src emacs-lisp
  ;; line numbers, after Emacs 26
  (global-display-line-numbers-mode)
#+end_src

*** whitespace

显示空白字符

#+begin_src emacs-lisp
  ;; activate whitespace-mode to view all whitespace characters
  (global-set-key (kbd "C-c w") 'whitespace-mode)
  ;; show unncessary whitespace that can mess up your diff
  (add-hook 'prog-mode-hook (lambda () (interactive) (setq show-trailing-whitespace 1)))
#+end_src

*** 最大化

#+begin_src emacs-lisp
  (toggle-frame-maximized)
#+end_src

* UI

** doom-themes

我用 ~doom-themes~, 具体见[[https://github.com/doomemacs/themes][官网]]

#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t       ; if nil,  bold is universally disabled
          doom-themes-enable-italic t)    ; if nil, italics is universally disabled
    ;; (load-theme 'doom-dracula t)
    (load-theme 'doom-laserwave t)
    ;; (load-theme 'doom-acario-light t)      ; a ligh theme
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

** doom-modeline

美化modeline， 具体见[[https://github.com/seagle0128/doom-modeline][官网]]

#+begin_src emacs-lisp
  (use-package nerd-icons)
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :custom
    (setq doom-modeline-height 25)
    (setq doom-modeline-bar-width 4)
    (setq doom-modeline-project-detection 'projectile)
    (setq doom-modeline-buffer-file-name-style 'auto)
    (setq doom-modeline-icon (display-graphic-p))
    (setq doom-modeline-major-mode-icon t)
    (setq doom-modeline-hud t)
    (setq doom-modeline-time-icon t)
    (setq doom-modeline-buffer-modification-icon t)
    (setq doom-modeline-env-version t)
    (setq doom-modeline-buffer-encoding t)
    :config
    (display-battery-mode 1)
    (column-number-mode t)
    (size-indication-mode t)
    (display-time-mode t)
    (setq display-time-24hr-format t)
    (setq display-time-default-load-average nil)
    (setq display-time-load-average-threshold 10)
    (setq display-time-format "%m/%d[%w]%H:%M ")
    (setq display-time-day-and-date t)
    (setq indicate-buffer-boundaries (quote left)))
#+end_src

** 字体

在系统shell里通过 ~fc-list~ 命令，找到对应family的名字

#+begin_src emacs-lisp
    ;; (set-frame-font "Fira Code-12")
    (set-face-attribute
     'default nil
     ;; :family "YaHei Consolas Hybrid"
     ;; :family "Fira Code"
     ;; :family "Menlo"
     ;; :family "JetBrains Mono"
     :family "Monaspace Krypton"
     :height 160
     :weight 'normal)

  (setq-default line-spacing 0.2)
#+end_src

** 图标

*** all-the-icons

#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p)
    )
#+end_src

*** all-the-icons-dired

#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :after all-the-icons
    :hook (dired-mode . all-the-icons-dired-mode)
    )
#+end_src

** transwin

Make window/frame transparent.

#+begin_src emacs-lisp
  (use-package transwin
    :after frame
    :config (transwin-ask 90)
    :custom (transwin-toggle)
    )
#+end_src

* 编辑器增强

** 基础

[[https://github.com/bbatsov/crux][官网]]，这包提供一些常用函数扩展，从Emacs Prelude里面来

#+begin_src emacs-lisp
  (use-package crux
  :bind (("C-a" . crux-move-beginning-of-line)))
#+end_src

保存时移除每一行最后的空白字符

#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

** which-key

这个包是一个 =minor mode= ，可以根据当前按键，提示可能的键绑定。具体见[[https://github.com/justbur/emacs-which-key][官网]]

#+begin_src emacs-lisp
  (use-package which-key                  ;bring up help on key combinations
    :diminish
    :hook (after-init . which-key-mode)
    :config
    (which-key-setup-side-window-bottom))
#+end_src

** ace-window

用于窗口切换，当有多个窗口时，每个窗口会显示一个数字，通过数字就可以跳到该窗口。具体见： [[https://github.com/abo-abo/ace-window][官网]]

Emacs本身自带 ~other-window~ 函数，绑定到 ~C-x o~ 上，所以这里我将 ~ace-window~ 绑定到 ~C-c o~

#+begin_src emacs-lisp
  ;; package ace-window
  (use-package ace-window
    :bind ("C-c o" . ace-window)
    :config
    ;; 设置为frame后会忽略treemacs frame，否则即使两个窗口时也会提示选择
    (setq aw-scope 'frame)
    ;; 调大窗口选择字符
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :foreground "red" :height 7.0))))))
#+end_src

** volatile-highlights

这是Emacs的一个 =minor mode= 用于可视化反馈。 比如当你粘贴一段文本的时候，这段文本会被高亮直到你有进一步的操作，具体见:[[https://github.com/k-talo/volatile-highlights.el][官网]]

#+begin_src emacs-lisp
  (use-package volatile-highlights
    :init
    (add-hook 'after-init-hook 'volatile-highlights-mode)
    :config
    (set-face-attribute 'vhl/default-face nil
                        :underline "yellow"))
#+end_src

** undo-tree

[[https://www.dr-qubit.org/undo-tree.html][官网]]

将undo历史可视化成一个tree，方便navigation

#+begin_src emacs-lisp
  (use-package undo-tree
    :init
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo"))
          undo-tree-visualizer-diff nil
          undo-tree-visualizer-timestamps t
          undo-tree-enable-undo-in-region t)
    :config
    (global-undo-tree-mode 1)
    )
#+end_src

** uniquify

build-in功能, 当Emacs打开具有相同名字的多个文件，增加前缀以示区别。具体见: [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Uniquify.html][这里]]

#+begin_src emacs-lisp
    (setq
     uniquify-buffer-name-style 'forward
     uniquify-separator ":"
     uniquify-after-kill-buffer-p t
     uniquify-ignore-buffers-re "^\\*")
#+end_src

** 括号配对

built-in功能，Emacs 24引入。自动闭合括号等，具体见： [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Matching.html][这里]]

#+begin_src emacs-lisp
  ;; auto close bracket insertion. New in emacs 24
  ;; built-in electric-pair
  (electric-pair-mode 1)
#+end_src

** comment-dwim-2

[[https://github.com/remyferre/comment-dwim-2][官网]]

~comment-dwim-2~ 用来替代Emacs内建的命令 ~comment-dwim~ ，用于注释，但是包含很多额外的特性。

#+begin_src emacs-lisp
  (use-package comment-dwim-2
    :bind ("M-;" . comment-dwim-2)
    )
#+end_src

** iedit

[[https://github.com/victorhge/iedit][官网]]

主要用于多点编辑

#+begin_src emacs-lisp
  (use-package iedit
    :init (setq iedit-toggle-key-default nil)
    :bind ("C-:" . iedit-mode)
    )
#+end_src

** golden-ratio

[[https://github.com/roman/golden-ratio.el][官网]]

当有多个窗口(window)的时候，有些窗口大小不太适合编辑。这个包可以自动缩放当前的窗口到合适大小

If you use a large screen and have very wide frames golden-ratio makes very wide windows. This can be handled automatically by setting =golden-ratio-auto-scale= to true.

#+begin_src emacs-lisp

  ;;package golden-ratio
  (use-package golden-ratio
    :config
    (golden-ratio-mode 1)
    (setq golden-ratio-auto-scale t)
    (setq golden-ratio-exclude-modes '("ediff-mode"
                                               "gud-mode"
                                               "gdb-locals-mode"
                                               "gdb-registers-mode"
                                               "gdb-breakpoints-mode"
                                               "gdb-threads-mode"
                                               "gdb-frames-mode"
                                               "gdb-inferior-io-mode"
                                               "gud-mode"
                                               "gdb-inferior-io-mode"
                                               "gdb-disassembly-mode"
                                               "gdb-memory-mode"
                                               "IELM"
                                               ;; "eshell-mode" "dired-mode"))
                                               )))
#+end_src

** centaur-tabs

增加标签页功能，Emacs有自己的 =tab-bar-mode= ，但是这个感觉好用且好看一些，先用这个吧。具体见： [[https://github.com/ema2159/centaur-tabs][官网]]

#+begin_src emacs-lisp
  (use-package centaur-tabs
    :after all-the-icons
    :config
    (setq centaur-tabs-set-bar 'over      ; display an underline over the selected tab
          centaur-tabs-height 32          ; tab height
          centaur-tabs-set-icons t        ; display themed icon from all-the-icons
          centaur-tabs-set-close-button nil ; disable the close button
          centaur-tabs-set-modified-marker t ; display a marker indicating that a buffer has been modified
          centaur-tabs-modified-marker " ● " ; change the displayed string for the modified-marker
          centaur-tabs-style "bar"        ; tab style, 可能的值:"alternate", "bar", "box", "chamfer", "rounded","slant", "wave", "zigzag"
          )
    (centaur-tabs-mode t)
    :bind
    ("C-9" . centaur-tabs-backward)
    ("C-0" . centaur-tabs-forward))
#+end_src

** rainbow-mode

直接将颜色显示出来，具体见： [[https://github.com/emacsmirror/rainbow-mode][官网]]

#+begin_src emacs-lisp
  ;; rainbow mode for display the color
  (use-package rainbow-mode
    :diminish
    :hook (prog-mode . rainbow-mode))
#+end_src

** rainbow-delimiters

使用不同颜色，显示不同级别的匹配括号。具体见： [[https://github.com/Fanael/rainbow-delimiters][官网]]

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :init (progn (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
    :config
    (set-face-foreground 'rainbow-delimiters-depth-1-face "chartreuse3")
    (set-face-foreground 'rainbow-delimiters-depth-2-face "DodgerBlue1")
    (set-face-foreground 'rainbow-delimiters-depth-3-face "DarkOrange2")
    (set-face-foreground 'rainbow-delimiters-depth-4-face "deep pink")
    (set-face-foreground 'rainbow-delimiters-depth-5-face "medium orchid")
    (set-face-foreground 'rainbow-delimiters-depth-6-face "turquoise")
    (set-face-foreground 'rainbow-delimiters-depth-7-face "lime green")
    (set-face-foreground 'rainbow-delimiters-depth-9-face "gold")
    (set-face-foreground 'rainbow-delimiters-depth-9-face "cyan")
    (set-face-bold 'rainbow-delimiters-depth-1-face "t")
    (set-face-bold 'rainbow-delimiters-depth-2-face "t")
    (set-face-bold 'rainbow-delimiters-depth-3-face "t")
    (set-face-bold 'rainbow-delimiters-depth-4-face "t")
    (set-face-bold 'rainbow-delimiters-depth-5-face "t")
    (set-face-bold 'rainbow-delimiters-depth-6-face "t")
    (set-face-bold 'rainbow-delimiters-depth-7-face "t")
    (set-face-bold 'rainbow-delimiters-depth-8-face "t")
    (set-face-bold 'rainbow-delimiters-depth-9-face "t")
    )
#+end_src

** 缩进

#+begin_src emacs-lisp
  (use-package aggressive-indent
  :config
  (global-aggressive-indent-mode t))
#+end_src

* 杂项

** helpful

增强Emacs内建帮助系统，具体见： [[https://github.com/Wilfred/helpful][官网]]

#+begin_src emacs-lisp
  (use-package helpful
    :bind (([remap describe-function] . helpful-callable)
           ([remap describe-command] . helpful-command)
           ([remap describe-variable] . helpful-variable)
           ([remap describe-key] . helpful-key)
           ([remap describe-symbol] . helpful-symbol))
    )
#+end_src

** nyan-mode

当前位置在buffer中的位置，使用一个彩虹猫展示。一切为了好看。 具体见： [[https://github.com/TeMPOraL/nyan-mode][官网]]

#+begin_src emacs-lisp
  (use-package nyan-mode
    :custom
    (nyan-cat-face-number 3)
    (nyan-animate-nyancat t)
    :config (nyan-mode 1))
#+end_src

** tramp

远程编辑，先这样吧

#+begin_src emacs-lisp
  ;;; Enable you to edit the file which on the REMOTE machines;;;;;
  ;;; tramp support many protocols:like ftp,ssh,etc.
  ;;; USAGE:
  ;;   /host:filepath
  ;;   /user@host:filepath
  ;;   /user@host#port:filepath
  ;;   /method:user@host:filepath
  ;;   /method:user@host#port:filepath
  ;;;;;; method stand for which protocol you want to use.
  ;;;;;;  host stand for the remote hostname/Ip Address
  (use-package tramp)
#+end_src

** markdown-mode


编辑markdown文件，具体见: [[https://jblevins.org/projects/markdown-mode/][官网]]

先这样吧，用 =org-mode= 比较多。

#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+end_src

** fanyi

#+begin_src emacs-lisp
(use-package fanyi
  :custom
  (fanyi-providers '(fanyi-haici-provider ;海词
                     fanyi-youdao-thesaurus-provider ;有道
                     fanyi-longman-provider          ;朗文？
                     ))
  )
#+end_src

* 通用补全

** orderless

 [[https://github.com/oantolin/orderless][orderless]] 提供orderless补全风格，使用空格分隔匹配模式，模式的顺序没有关系，但是AND关系。各模式可以使用如下几种类型：

 - 字面意思(literally): the components is treated as a literal string that must occur in the candidate.
 - 正则表达式(regexp): the component is treated as a regexp that must match somewhere in the candidate.
 - 首字母缩写(initialism): each character of the component should appear as the beginning of a word in the candidate, in order. This maps abc to <a.*<b.*c.
 - flex样式或多个单词前缀: the characters of the component should appear in that order in the candidate, but not necessarily consecutively. This maps abc to a.*b.*c.

默认情况下，启用字面意思和正则表达式匹配。

orderless 的 style dispatchers 机制可以更灵活的定义输入字符串的匹配风格，可以通过变量 =orderless-style-dispatchers= 来定义，默认值为 =orderless-affix-dispatch=, 它使用一种简单的前缀或后缀的字符(串)来表示各种风格：

=!=
makes the rest of the component match using =orderless-without-literal=, that is, both =!bad and bad!= will match strings that =do not contain the substring bad=.

=~,~=
uses orderless-initialism.

===
uses orderless-literal

=~~~=
uses orderless-flex

=%=
makes the string match ignoring diacritics and similar inflections on characters (it uses the function =char-fold-to-regexp= to do this).

=!= 只能对 =字面量= 匹配取反(orderless-without-literal), 和其他dispatch字符连用时， ！需要前缀形式， 如 !=.go 将不匹配含有字面量.go的候选者

#+begin_src emacs-lisp
  (use-package orderless
    :config
    ;; https://github.com/minad/consult/wiki#minads-orderless-configuration
    (defun +orderless--consult-suffix()
      "Regexp which matches the end of string with Consult tofu support."
      (if (and (boundp 'consult--tofu-char) (boundp 'consult--tofu-range))
          (format "[%c-%c]*$"
                  consult--tofu-char
                  (+ consult--tofu-char consult--tofu-range -1))
        "$"))

    ;; Recognizes the following patterns:
    ;; * .ext (file extension)
    ;; * regexp$ (regexp matching at end)
    (defun +orderless-consult-dispatch (word _index _total)
      (cond
       ;; Ensure that $ works with Consult commands, which add disambiguation suffixs
       ((string-suffix-p "$" word)
        `(orderless-regexp . ,(concat (substring word 0 -1) (+orderless--consult-suffix))))
       ;; File extensions
       ((and (or minibuffer-completing-file-name
                 (derived-mode-p 'eshell-mode))
             (string-match-p "\\`\\..'" word))
        `(orderless-regexp . ,(concat "\\." (substring word 1) (+orderless--consult-suffix))))))

    ;; 在 orderless-affix-dispatch 的基础上添加上面支持文件名扩展和正则表达式的 dispatchers
    (setq orderless-style-dispatchers (list #'+orderless-consult-dispatch
                                            #'orderless-affix-dispatch))

    ;; 自定义名为 +orderless-with-initialism 的 orderless风格
    (orderless-define-completion-style +orderless-with-initialism
      (orderless-matching-styles '(orderless-initialism orderless-literal orderless-regexp)))

    ;; 使用orderless和emacs原生的basic补全风格，但orderless的优先级更高
    (setq completion-styles '(orderless partial-completion basic))
    (setq completion-category-defaults nil)
    ;; 进一步设置各category使用的补全风格
    (setq completion-category-overrides
          '(
            (eglot (styles orderless))
            ;; buffer name 补全
            (buffer (styles +orderless-with-initialism))
            ;; file path&name 补全，partial completion提供了wildcard支持
            (file (styles basic partial-completion))
            (command (styles +orderless-with-initialism))
            (variable (styles +orderless-with-initialism))
            (symbol (styles +orderless-with-initialism))
            ))
    ;; 使用space来分割过滤字符，SPACE可以用\转义
    (setq orderless-component-separator #'orderless-escapable-split-on-space))
#+end_src

- partial-completion 支持shell wildcards 和部分文件路径， 如/u/s/l for /usr/share/local
- 已知的 [[https://gitlab.com/protesilaos/dotfiles/-/blob/master/emacs/.emacs.d/prot-emacs-modules/prot-emacs-completion-common.el#L60][completion categories]]

** vertico

[[https://github.com/minad/vertico][vertico]] 基于默认完成提供一个高性能且简约的垂直完成UI系统，经过复用内置设施系统，Vertico实现了与内置Emacs补全的完全兼容命令和完成表。Vertico仅提供完成UI，但旨在高度灵活，可扩展和模块化

#+begin_src emacs-lisp
  (use-package vertico
    :config
    (vertico-mode 1)
    (setq vertico-count 25)
    (setq vertico-resize t)
    )
#+end_src

** vertico-posfram

#+begin_src emacs-lisp
  (use-package vertico-posframe
    :after (vertico)
    :config
    (vertico-posframe-mode 1)
    (setq vertico-posframe-width 160
          vertico-posframe-height vertico-count))
#+end_src

** consult

安装ripgrep工具

#+begin_src shell
brew install ripgrep
# debian发行版每个版本都有对应的deb包
#+end_src

[[https://github.com/minad/consult][官网]]

这个包基于Emacs补全函数 ~completing-read~ 函数，可以从候选列表中快速选择一个item。

下面的配置基本来自官方建议

#+begin_src emacs-lisp
  (use-package consult
    :bind (("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ;; ("C-c k" . consult-kmacro)
           ("C-x M-:" . consult-complex-command) ;orig: repeat-complex-command
           ("C-x b" . consult-buffer)     ; orig: switch-to-buffer
           ("C-x r b" . consult-bookmark)
           ("C-x p b" . consult-project-buffer)
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ;; ("M-g f" . consult-flymake)    ; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)  ; Orig: goto-line
           ("M-g M-g" . consult-goto-line) ; Orig: goto-line
           ("M-g o" . consult-outline)     ;Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings (search-map)
           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ;; ("M-s k" . consult-keep-lines)
           ;; ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history) ; orig: isearch-edit-string
           ("M-s e" . consult-isearch-history) ; orig: isearch-edit-string
           ("M-s l" . consult-line)            ; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)      ; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)      ; orig: next-matching-history-element
           ("M-r" . consult-history))      ; orig: previous-matching-history-element
    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)
    :init
    ;; Optionally configure the register formatting. This improves the register
    ;; preview for consult-register, consult-register-load, consult-register-store
    ;; and the Emacs built-ins
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)
    ;; Use consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)
    :config
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the consult-customize macro
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-recent-file
     consult--source-project-recent-file
     ;; :preview-key (kbd "M-."))
     :preview-key '(:debounce 0.4 any))
    (setq consult-narrow-key "<")
    )
#+end_src

** Marginalia

给minibuffer添加额外信息。见: [[https://github.com/minad/marginalia][官网]]

#+begin_src emacs-lisp
  ;; Marginalia
  ;; Enhances the minibuffer completions with additional informations
  (use-package marginalia
    :after vertico
    :custom
    (marginalia-annotators
     '(marginalia-annotators-heavy marginalia-annotators-light nil))
    (marginalia-align 'left)
    :init (marginalia-mode))
#+end_src

** all-the-icons-completion

给补全系统里的candidates加上icon，见: [[https://github.com/iyefrat/all-the-icons-completion][官网]]

#+begin_src emacs-lisp
  (use-package all-the-icons-completion
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init
    (all-the-icons-completion-mode))
#+end_src

* 编程

** 补全系统
*** corfu

补全功能，之前用 =company-mode= ，但是太重量了。所以换成corfu，具体见： [[https://github.com/minad/corfu][官网]]

#+begin_src emacs-lisp
  (use-package corfu
    :after (orderless)
    :hook (prog-mode . corfu-mode)
    :bind (:map corfu-map
                ("M-n" . corfu-next)
                ("M-p" . corfu-previous)
                ("TAB" . corfu-insert))
    :custom
    (corfu-cycle t)                       ; Enable cycling for `corfu-next/prevous`
    (corfu-auto t)                        ; Enable auto completion
    (corfu-preview-current nil)           ; Disable current candidate preview
    (corfu-quit-at-boundary 'separator)   ; Automatically quit at word boundary
    (corfu-quit-no-match 'separator)      ; Automatically quit if there is no match
    (corfu-echo-documentation t)
    :init
    (global-corfu-mode))
#+end_src

*** cape

#+begin_src emacs-lisp
  (use-package cape
    :init
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-keyword)
    (add-to-list 'completion-at-point-functions #'cape-history)
    )

  (use-package emacs
    :init
    (setq completion-cycle-threshold 3)
    )
#+end_src

*** treesit

#+begin_src emacs-lisp
  (use-package treesit
    :init
    (setq treesit-language-source-alist
          '((bash "https://github.com/tree-sitter/tree-sitter-bash")
            (c "https://github.com/tree-sitter/tree-sitter-c")
            (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
            (cmake "https://github.com/uyha/tree-sitter-cmake")
            (elisp "https://github.com/Wilfred/tree-sitter-elisp")
            (go "https://github.com/tree-sitter/tree-sitter-go")
            (gomod "https://github.com/camdencheek/tree-sitter-go-mod")
            (rust "https://github.com/tree-sitter/tree-sitter-rust")
            (html "https://github.com/tree-sitter/tree-sitter-html")
            (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
            (json "https://github.com/tree-sitter/tree-sitter-json")
            (make "https://github.com/alemuller/tree-sitter-make")
            (markdown "https://github.com/ikatyang/tree-sitter-markdown")
            (python "https://github.com/tree-sitter/tree-sitter-python")
            (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
            (toml "https://github.com/tree-sitter/tree-sitter-toml")
            ))
    (setq major-mode-remap-alist
          '((bash-mode . bash-ts-mode)
            ;;         (js2-mode . js-ts-mode)
            (python-mode . python-ts-mode)
            (go-mode . go-ts-mode)
            (rust-mode . rust-ts-mode)
            (c-mode . c-ts-mode)
            (c++-mode . c++-ts-mode)))
    )
  (setq
   c-ts-mode-indent-offset 4
   c-ts-mode-indent-offset 4
   rust-ts-mode-indent-offset 4
   go-ts-mode-indent-offset 4
   )
#+end_src

*** treesit-auto

treesit-auto 自动安装 grammer 和自动将 xx major-mode remap 到对应的 xx-ts-mode 上。具体参考变量: treesit-auto-recipe-list:

grammer 安装位置: ~/.emacs.d/tree-sitter, 如 ~/.emacs.d/tree-sitter/libtree-sitter-python.dylib

执行 M-x treesit-auto-install-all 来安装所有的 treesit modules。
如果要重新安装(升级) grammer, 需要先删除 dylib 文件或 tree-sitter 目录, 重启 emacs 后再执行 M-x treesit-auto-install-all.

#+begin_src emacs-lisp
  (use-package treesit-auto
    :config
    (setq treesit-auto-install 'prompt)
    (global-treesit-auto-mode))
#+end_src

*** yasnippet

模版补全，lsp-bridge也需要这个包。[[https://github.com/joaotavora/yasnippet][官网]]

#+begin_src emacs-lisp
  (use-package yasnippet
    :bind (:map yas-keymap
                ("C-i" . yas-next-field-or-maybe-expand))
    :hook ((prog-mode org-mode) . yas-minor-mode)
    :init (defvar snippet-directory "~/.emacs.d/snippets")
    :config
    (add-to-list 'yas-snippet-dirs snippet-directory)
    (yas-global-mode 1)
    )
#+end_src

*** posframe

弹出一个posframe(只是一个子frame)。lsp-bridge需要这个包 。[[https://github.com/tumashu/posframe][官网]]

#+begin_src emacs-lisp
  (use-package posframe)
#+end_src

*** lsp-bridge

LSP客户端。使用python的线程技术在Emacs和lsp服务器之间建立bridge，加速补全。

具体见: [[https://github.com/manateelazycat/lsp-bridge][官网]]

#+begin_src emacs-lisp
  (use-package lsp-bridge
    :disabled t
    :load-path "~/.emacs.d/site-lisp/lsp-bridge"
    :hook (after-init . global-lsp-bridge-mode)
    :bind
    (:map lsp-bridge-mode-map
          ("M-." . lsp-bridge-find-def)
          ("M-," . lsp-bridge-find-def-return)
          ("M-?" . lsp-bridge-find-references)
          ("M-i" . lsp-bridge-lookup-documentation)
          ("M-n" . lsp-bridge-popup-documentation-scroll-up)
          ("M-p" . lsp-bridge-popup-documentation-scroll-down)
          ("s-C-n" . lsp-bridge-jump-to-next-diagnostic)
          ("s-C-p" . lsp-bridge-jump-to-prev-diagnostic))
    :config
    (setq lsp-bridge-enable-log nil)
    (setq lsp-bridge-enable-signature-help t)
    )

  ;; (add-to-list 'load-path "~/.emacs.d/elpa/lsp-bridge")
  ;; (require 'lsp-bridge)
  ;; (global-lsp-bridge-mode)
#+end_src

*** eglot

built-in

#+begin_src emacs-lisp
  (use-package eglot
    :hook
    (python-mode . eglot-ensure)
    (c-mode . eglot-ensure)
    (c++-mode . eglot-ensure)
    (go-mode . eglot-ensure)
    (rust-mode . eglot-ensure)
    (prog-mode . eglot-ensure)
    )
 #+end_src

*** citre

[[https://www.gnu.org/software/global/][GNU Global]] 内置了 5 种语言解析器，包括 C/Yacc/JAVA/assembly, 其他 25 种语言使用 Pygments + Universal Ctags 解析器插件来支持的。

安装 GNU global 和 pygments, global 依赖并自动安装 universal-ctags, 通过 pygments 能生成更丰富的 TAG 内容，同 时支持 reference 搜索。

- https://github.com/universal-ctags/citre/blob/master/docs/user-manual/citre-global.md
- global 默认使用 brew 安装的 python@3.12 和 pygments, 而不能直接使用 pip install pygments.

#+begin_quote
brew install global pygments # 提供 global、gtags 命令, gtags 使用 pygments 支持跟多语言

# 在 ~/.bashrc 中添加如下配置：
# 统一的 tags 文件目录
export GTAGSOBJDIRPREFIX=~/.cache/gtags/
mkdir $GTAGSOBJDIRPREFIX
export GTAGSCONF=/opt/homebrew/opt/global/share/gtags/gtags.conf
# 使用 pygments 支持更多的语言，他噢夹南是支持 reference 搜索。
export GTAGSLABEL=pygments
#+end_quote

citre 是基于 Ctags（Universal Ctags 版本）的代码浏览器工具，也支持[[https://github.com/universal-ctags/citre/blob/master/docs/user-manual/citre-global.md][集成使用GNU global 的 GTAGS 文件]]。

创建和更新 GNU global GTAGS 文件（保存到 GTAGSOBJDIRPREFIX 环境变量指定的位置，如 ~/.cache/gtags/)：

- M-x citre-global-create-database
- M-x citre-global-update-database

注意以下两个命令创建 Universal Ctags 的 ctags 文件（项目有 .tags/ 目录或 .tags 或 tags 文件），而非 GNU global GTAGS 文件，不支持 references，不建议使用：

- M-x citre-create-tags-file
- M-x citre-update-tags-file

如果误使用了上面的命令创建 ctags 文件则后续使用 xref-find-references 会 hang，需要删除。

使用 citre:

- *M-x citre-jump-to-reference*
  - which reuses the citre-jump UI;
- *M-x citre-peek-references*
  - equivalent to citre-peek;
- *M-x citre-ace-peek-references*
  - equivalent to citre-ace-peek;
- *M-x citre-peek-through-references*
  - equivalent to citre-peek-through.
- *M-x citre-ace-peek*
  - 使用 ace 来 peek 查看指定的符号定义或函数签名。
- *M-x citre-peek*
  - 查看当前光标处符号的定义或函数签名。

执行 s-? (citre-peek-reference) 支持如下快捷键：

- M-n, M-p: Next/prev line，当前显示的内容的下一行或上一行（文件不变）。
- M-N, M-P: Next/prev definition. 切换到下一个或上一个文件。
- M-l j: Jump to the definition. (跳转到当前预览的位置定义文件，同时 peek window 继续显示，可以使用 M-n/M-p/M-N/M-P 来使用 peek window)。
- M-l p：M-x citre-peek-through， 在 peek window 中选择一个 symbol，然后跳转到定义。
- C-g: Close the peek window.

M-l 前缀快捷键：

- j citre-peek-jump
- f citre-peek-make-current-tag-first
- D citre-peek-delete-branches
- d citre-peek-delete-branch
- r citre-peek-through-reference
- p citre-peek-through

通过 peek through 打开多个多个 function definition 后，citre 会在 peek window 下方记录 peek history， 可以使用 <left>/<right> 来移动 history，当前的位置用 [func] 方括号来表示。

可以使用 C-l 来调整 peek window 的位置。

对于开启了 citre-mode 的 buffer，citre 会向 xref-backend-functions 中添加 citre-xref-backend, 所以后 续使用 imenu/xref-find-references/xref-find-definitions 时会使用 citre 提供的输入。同时 xref 和 consult 结合，可以使用 consult 来预览 xref 的结果。

xref-backend-functions 可能会被添加多个 backend，它使用第一个 backend 返回地信息，所以必须确保 citre-xref-backend 位于列表的第一位。常见的问题是 eglot 会将 xref-backend-functions 重置为唯一的 eglot-xref-backend。

- 解决办法：定义一个函数 my/toggle-eglot 来关闭 eglot，这时 xref-backend-functions 会恢复为 eglot 启 动前设置的值。

在 citre-jump（M-.) 的弹出时 buffer 中可以使用正则语法对候选者进行过滤（orderless 提供的支持）, 例 如: something kind:^member$ kind:^macro$ input:.c$

#+begin_src emacs-lisp
  (setenv "GTAGSOBJDIRPREFIX" (expand-file-name "~/.cache/gtags/"))
  (setenv "GTAGSCONF" (car (file-expand-wildcards "/opt/homebrew/opt/global/share/gtags/gtags.conf")))
  (setenv "GTAGSLABEL" "pygments")

  (use-package citre
    :after (eglot)
    :init
    ;; when open a file, if it can find the relative TAGS file, it will turn-on the citre-mode
    ;; when citre-mode is on, it will add "citre-xref-backend" into xref-backend-functions hook
    ;; and this will support integration of xref and imenu
    (require 'citre-config)
    :config
    ;; only use GNU Global tags, which support reference
    (setq citre-completion-backends '(global))
    (setq citre-find-definition-backends '(global))
    (setq citre-find-reference-backends '(global))
    (setq citre-tags-in-buffer-backends '(global))
    (setq citre-auto-enable-citre-mode-bakcends '(global))
    ;; citre-config is only useful for prog-mode file
    (setq citre-auto-enable-citre-mode-modes '(go-ts-mode go-mode python-ts-mode python-mode rust-ts-mode rust-mode c-mode c-ts-mode c++-mode c++-ts-mode))
    (setq citre-use-project-root-when-creating-tags t)
    (setq citre-peek-file-content-height 20)
    ;; after citre-config automaticaly enable citre-mode
    ;; the key-binding under citre-mode-map is enabled
    (global-set-key (kbd "M-.") 'citre-jump)
    (global-set-key (kbd "M-,") 'citre-jump-back)
    (global-set-key (kbd "M-?") 'citre-peek-reference)
    (global-set-key (kbd "M-p") 'citre-peek)
    (define-key citre-peek-keymap (kbd "M-n") 'citre-peek-next-line)
    (define-key citre-peek-keymap (kbd "M-p") 'citre-peek-prev-line)
    (define-key citre-peek-keymap (kbd "M-N") 'citre-peek-next-tag)
    (define-key citre-peek-keymap (kbd "M-P") 'citre-peek-prev-tag)
    (global-set-key (kbd "C-x c u") 'citre-global-update-database)
    ;; when eglot is closed, close citre-mode, prevent mutual interference between the two xref backends
    (add-hook 'eglot-managed-mode-hook (lambda () (citre-mode -1)))
    )
#+end_src

** 文档帮助

*** devdocs

#+begin_src emacs-lisp
  (use-package devdocs)
#+end_src

*** eldoc

是一个 =minor mode= ，在echo area里显示函数参数

#+begin_src emacs-lisp
  (use-package eldoc
    :diminish eldoc-mode
    :config (add-hook 'prog-mode-hook 'eldoc-mode))
#+end_src

** programming languages

*** C/C++

#+begin_src emacs-lisp
    (use-package cc-mode
      :mode (("\\.hpp\\(h?\\|xx\\|pp\\)\\'" . c++-mode)
             ("\\.c\\'" . c-mode)
             ("\\.h\\'" . c-mode)
             ("\\.m\\'" . c-mode)
             ("\\.mm\\'" . c-mode))
      :config
      ;; Available C style:
      ;; “gnu”: The default style for GNU projects
      ;; “k&r”: What Kernighan and Ritchie, the authors of C used in their book
      ;; “bsd”: What BSD developers use, aka “Allman style” after Eric Allman.
      ;; “whitesmith”: Popularized by the examples that came with Whitesmiths C, an early commercial C compiler.
      ;; “stroustrup”: What Stroustrup, the author of C++ used in his book
      ;; “ellemtel”: Popular C++ coding standards as defined by “Programming in C++, Rules and Recommendations,” Erik Nyquist and Mats Henricson, Ellemtel
      ;; “linux”: What the Linux developers use for kernel development
      ;; “python”: What Python developers use for extension modules
      ;; “java”: The default style for java-mode (see below)
      ;; “user”: When you want to define your own style
      (setq c-default-style '((awk-mode . "awk")
                                    (other . "linux"))) ;; set style to "k&r"
      (setq c-basic-offset 4)
      (setq tab-width 4) ; or any other preferred value
      )
#+end_src

#+begin_src emacs-lisp
  (use-package modern-cpp-font-lock
    :hook (c++-mode . modern-c++-font-lock-global-mode))
#+end_src

*** assembler

汇编语言模式。 [[https://github.com/skeeto/nasm-mode][官网]]

#+begin_src emacs-lisp
  (use-package nasm-mode
    :mode (("\\.nasm\\'" . nasm-mode)
           ("\\.s\\'" . nasm-mode)
           ("\\.asm\\'" . nasm-mode))
    )
#+end_src

*** python

设置python-mode

#+begin_src emacs-lisp

  (use-package python
    :defer t
    :mode ("\\.py\\'" . python-mode)
    :config
    (setq python-shell-interpreter "python3.12")
    )
#+end_src

**** python虚拟环境

[[https://github.com/jorgenschaefer/pyvenv][官网]]

#+begin_src emacs-lisp
  (use-package pyvenv
    :demand
    :init
    ;; (setenv "WORKON_HOME" "/home/wangchang/Programme/pythonCode")
    :config
    (pyvenv-mode 1)
    ;; set corret python interpreter
    (setq pyvenv-post-activate-hooks
          (list (lambda()
                  (setq python-shell-interpreter (concat pyvenv-virtual-env "/opt/homebrew/bin/python3.12")))))
    (setq pyvenv-post-deactivate-hooks
          (list (lambda()
                  (setq python-shell-interpreter "/opt/homebrew/bin/python3.12"))))
    )
#+end_src

*** go

设置go-mode

#+begin_src emacs-lisp
  (use-package go-mode
    :mode (("\\.go\\'" . go-mode))
    ;; :init (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
    )
#+end_src

**** go-eldoc

给go语言提供eldoc功能。 [[https://github.com/emacsorphanage/go-eldoc][官网]]

#+begin_src emacs-lisp
  (use-package go-eldoc
    :defer t
    :config
    (add-hook 'go-mode-hook 'go-eldoc-setup))
  (add-hook 'go-mode-hook (lambda () (setq tab-width 4)))
#+end_src

*** web

web开发配置。不太写前端，先这样凑活用着吧

#+begin_src emacs-lisp
  (use-package web-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.api\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("/some/react/path/.*\\.js[x]?\\'" . web-mode))
    (setq web-mode-engines-alist
          '(("php"    . "\\.phtml\\'")
            ("blade"  . "\\.blade\\."))
          )
    (setq web-mode-content-types-alist
          '(("json" . "/some/path/.*\\.api\\'")
            ("xml"  . "/other/path/.*\\.api\\'")
            ("jsx"  . "/some/react/path/.*\\.js[x]?\\'")))
    (setq web-mode-enable-auto-pairing t)
    (setq web-mode-enable-css-colorization t)
    (setq web-mode-enable-current-column-highlight t)
    (defun my-web-mode-hook ()
      "Hooks for Web mode."
      (setq web-mode-markup-indent-offset 2)
      )
    (add-hook 'web-mode-hook  'my-web-mode-hook))
#+end_src

*** javascript

增强JavaScript编辑模式。 [[https://github.com/mooz/js2-mode][官网]]

不太写js，先这样

#+begin_src emacs-lisp
  (use-package js2-mode
    :mode ("\\.js\\'" . js2-mode)
    :bind (("C-c ! n" . js2-next-error))
    :config
    (progn
      (setq-default js2-basic-offset 4)
      (setq-default js2-strict-trailing-comma-warning t)
      (setq-default js2-global-externs
                    '("module"
                      "exports"
                      "require"
                      "process"
                      "setTimeout"
                      "clearTimeout"
                      "setInterval"
                      "clearInterval"
                      "window"
                      "location"
                      "__dirname"
                      "console"
                      "JSON"))
      (add-to-list 'interpreter-mode-alist (cons "node" 'js2-mode)))
    )
#+end_src

*** rust

rust语言

#+begin_src emacs-lisp
  (use-package rust-mode
    :mode ("\\.rs\\'" . rust-mode)
    :config
    (setq rust-format-on-save t)
    )
#+end_src

** 错误自动检查

*** flycheck

自动检查语法, [[https://www.flycheck.org/][官网]]

#+begin_src emacs-lisp
  (use-package flycheck
    :config (global-flycheck-mode)
    :bind
    (("C-c e n" . flycheck-next-error)
     ("C-c e p" . flycheck-previour-error)
     ("C-c e l" . flycheck-list-errors))
    )
#+end_src

*** flycheck-rust

[[https://github.com/flycheck/flycheck-rust][官网]]

#+begin_src emacs-lisp
  (use-package flycheck-rust
    :config (add-hook 'rust-mode-hook #'flycheck-rust-setup)
    )
#+end_src

** 项目管理

*** project

#+begin_src emacs-lisp
  (use-package project)
#+end_src

** 版本控制相关

*** magit

[[https://magit.vc/][官网]]

Emacs的git客户端

#+begin_src emacs-lisp
  (use-package magit
    :bind (("C-x g s" . magit-status)
           ("C-x g f" . magit-log-buffer-file)
           ("C-x g x" . magit-checkout)
           ("C-x g c" . magit-commit)
           ("C-x g p" . magit-push)
           ("C-x g u" . magit-pull)
           ("C-x g e" . magit-ediff-resolve)
           ("C-x g r" . magit-rebase-interactive))
    :config (magit-auto-revert-mode)
    )
#+end_src

*** git-gutter

[[https://github.com/emacsorphanage/git-gutter][官网]]

Emacs中实时显示修改

#+begin_src emacs-lisp

  (use-package git-gutter+
    :disabled
    :config
    (progn
      (global-git-gutter+-mode)))
#+end_src

** 其他配置

*** cmake-mode

#+begin_src emacs-lisp
  (use-package cmake-mode
    :mode ("CMakeLists.txt" "\\.cmake\\'")
    )
#+end_src

** 调试

*** gud

现在在用realgud，暂时没有配置，直接用M-x运行就可以

#+begin_src emacs-lisp
  ;; (use-package gud
  ;;   :commands gud-gdb
  ;;   :bind (("<f9>" . gud-cont)
  ;;          ("<f10>" . gud-next)
  ;;          ("<f11>" . gud-step)
  ;;          ("S-<f11>" . gud-finish))
  ;;   :init
  ;;   (defun show-debugger ()
  ;;     (interactive)
  ;;     (let ((gud-buf
  ;;            (catch 'found
  ;;              (dolist (buf (buffer-list))
  ;;                (if (string-match "\\*gud-" (buffer-name buf))
  ;;                    (throw 'found buf))))))
  ;;       if (gud-buf
  ;;           (switch-to-buffer-other-window gud-buf)
  ;;           (call-interactively 'gud-gdb))))
  ;;   )
#+end_src

* Org-mode

** org

#+begin_src emacs-lisp

  (use-package org
    :mode ("\\.org\\'" . org-mode)
    :hook (org-mode . visual-line-mode)
    :init (setq
           org-use-speed-commands t
           org-return-follows-link t
           org-hide-emphasis-markers t     ; don't display the emphasis markers
           org-outline-path-complete-in-steps nil
           org-startup-indented t
           org-startup-folded 'content
           org-fontify-done-headline t     ;change the face of a headline if it's marked DONE
           org-src-fontity-natively t        ;Pretty code blocks
           org-pretty-entities t           ;show entities as UTF-8 characters
           org-hide-leading-stars t        ;hide the stars
           org-src-tab-acts-natively t     ;Make TAB acts as if it were issued from the buffer of the languages's major mode
           truncate-lines t
           org-confirm-babel-evaluate nil) ;don't notify -> "Do you want to execute"
    :config (setq
             org-directory (file-truename "~/Documents/Google Driver/All Notes")
             org-todo-keywords
             '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELED(c)")))
    (org-babel-do-load-languages 'org-babel-load-languages
                                 (append org-babel-load-languages
                                         '((emacs-lisp . t)
                                           (python . t)
                                           (shell . t)
                                           (C . t)
                                           (ditaa . t)
                                           (js . t)
                                           (go . t))))
    :custom
    (setq org-log-done 'time)
    (setq org-agenda-files (list "~/Documents/Google Driver/All Notes/Agenda/work.org"
                                 "~/Documents/Google Driver/All Notes/Agenda/study.org"
                                 "~/Documents/Google Driver/All Notes/Agenda/life.org"))
    :bind(("C-c l" . org-store-link)
          ("C-c a" . org-agenda)
          ("C-c c" . org-capture))
    )
#+end_src

** org-bullets

#+begin_src emacs-lisp
    ;; really need this package to set the org-bullets by yourself
    (use-package org-bullets
      :hook (org-mode . org-bullets-mode)
      :config
      ;; (setq org-bullets-bullet-list '("☰" "☷" "☯" "☭" "✸" "✿"))
      ;; hexagrams
      ;; (setq org-bullets-bullet-list '("✡" "⎈" "✽" "✲" "✱" "✻" "✼" "✽" "✾" "✿" "❀" "❁" "❂" "❃" "❄" "❅" "❆" "❇"))
      ;; circles
      ;; (setq org-bullets-bullet-list '("○" "☉" "◎" "◉" "○" "◌" "◎" "●" "◦" "◯" "⚪" "⚫" "⚬" "❍" "￮" "⊙" "⊚" "⊛" "∙" "∘"))
      ;; special circles
      ;; (setq org-bullets-bullet-list '("◐" "◑" "◒" "◓" "◴" "◵" "◶" "◷" "⚆" "⚇" "⚈" "⚉" "♁" "⊖" "⊗" "⊘"))
      ;; crosses
      ;; (setq org-bullets-bullet-list '("✙" "♱" "♰" "☥" "✞" "✟" "✝" "†" "✠" "✚" "✜" "✛" "✢" "✣" "✤" "✥"))
      ;; poker sybmols
      ;; (setq org-bullets-bullet-list '("♠" "♣" "♥" "♦" "♤" "♧" "♡" "♢"))
      ;; special symbols
      ;; (setq org-bullets-bullet-list '("☀" "♼" "☼" "☾" "☽" "☣" "§" "¶" "‡" "※" "✕" "△" "◇" "▶" "◀" "◈"))
      (setq org-bullets-bullet-list '("☯" "☰" "☱" "☲" "☳" "☴" "☵" "☶" "☷")) ;
      (setq org-ellipsis "▼"))
#+end_src

** org-tempo

#+begin_src emacs-lisp
  ;; for '<s/e/c... TAB'  completion
  ;; or "C-c C-,"
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("se" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sp" . "src python"))
  (add-to-list 'org-structure-template-alist '("sg" . "src go"))
  (add-to-list 'org-structure-template-alist '("sc" . "src c"))
  (add-to-list 'org-structure-template-alist '("scpp" . "src c++"))
  (add-to-list 'org-structure-template-alist '("sr" . "src rust"))
#+end_src

** ob-go

[[https://github.com/pope/ob-go][官网]] 这个包使org-babel支持执行go代码

#+begin_src emacs-lisp
  (use-package ob-go)
#+end_src

** ob-rust

[[https://github.com/micanzhang/ob-rust][ob-rust]] 使org-babel支持执行rust代码

#+begin_src emacs-lisp
(use-package ob-rust)
#+end_src

** ox-reveal

#+begin_src emacs-lisp
  (use-package ox-reveal)
#+end_src

** ox-gfm

#+begin_src emacs-lisp
  (use-package ox-gfm)
#+end_src

** toc-org

[[https://github.com/snosov1/toc-org][官网]]

#+begin_src emacs-lisp
  ;; maintain TOC(table of contents) automatically
  ;; put :TOC: tag to a heading, run M-x toc-org-insert-toc
  (use-package toc-org
    :after org
    :hook (org-mode . toc-org-mode)
    )
#+end_src

** org-mime

#+begin_src emacs-lisp
  ;; WYSIWYG, html mime composition using org-mode
  (use-package org-mime)
#+end_src

** org-download

[[https://github.com/abo-abo/org-download][官网]]

#+begin_src emacs-lisp
  (use-package org-download
    :after org
    :hook ((org-mode dired-mode) . org-download-enable)
    :init
    (setq-default org-download-image-dir "./images")
    ;; (org-download-timestamp "%Y%m%d-%H%M%S_")
    (setq-default org-download-heading-lvl nil))
#+end_src

** org-roam

#+begin_src emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory "~/Documents/Google Driver/brain-notes")
    (org-roam-db-location "~/Documents/Google Driver/brain-notes/org-roam.db")
    (org-roam-db-gc-threshold most-positive-fixnum)
    (org-roam-complete-everywhere t)
    (org-roam-db-autosync-mode)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert))
    :config (org-roam-db-autosync-enable))
#+end_src

* 结尾

#+begin_src emacs-lisp
  (provide 'config)
  ;;; config.el ends here
#+end_src
